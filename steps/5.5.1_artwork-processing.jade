//- 1. If an <artwork> element has a “src” attribute where no scheme is
//- specified, copy the “src” attribute value to the “originalSrc” attribute,
//- and replace the “src” value with a URI that uses the “file:” scheme in a
//- path relative to the file being processed. See Section 8 for warnings about
//- this step. This will likely be one of the most common authoring approaches.

//- 2. If an <artwork> element has a “src” attribute with a “file:” scheme, and
//- if processing the URL would cause the processor to retrieve a file that is
//- not in the same directory, or a subdirectory, as the file being processed,
//- give an error. If the “src” has any shellmeta strings (such as “`”, “$USER”,
//- and so on) that would be processed , give an error. Replace the “src”
//- attribute with a URI that uses the “file:” scheme in a path relative to the
//- file being processed. This rule attempts to prevent <artwork
//- src=’file:///etc/passwd’> and similar security issues. See Section 8 for
//- warnings about this step.

//- 3. If an <artwork> element has a “src” attribute, and the element has
//- content, give an error.

//- 4. If an <artwork> element has type=’svg’ and there is a “src” attribute,
//- the data needs to be moved into the content of the <artwork> element.
//-   - If the “src” URI scheme is “data:”, fill the content of the <artwork>
//-     element with that data and remove the “src” attribute.
//-   - If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the
//-     content of the <artwork> element with the resolved XML from the URI in 
//-     the “src” attribute. If there is no “originalSrc” attribute, add an
//-     “originalSrc” attribute with the value of the URI and remove the “src”
//-     attribute.

//- 5. If an <artwork> element has type=’binary-art’, the data needs to be in a
//- “src” attribute with a URI scheme of “data:”. If the “src” URI scheme is
//- “file:”, “http:”, or “https:”, resolve the URL. Replace the “src” attribute
//- with a “data:” URI, and add an “originalSrc” attribute with the value of the
//- URI. For the “http:” and “https:” URI schemes, the mediatype of the “data:”
//- URI will be the Content-Type of the HTTP response. For the “file:” URI
//- scheme, the mediatype of the “data:” URI needs to be guessed with heuristics
//- (this is possibly a bad idea). This also fails for content that includes
//- binary images but uses a type other than “binary-art”. Note: since this
//- feature can’t be used for RFCs at the moment, this entire feature might be
//- de-prioritized.

//- 6. If an <artwork> element does not have type=’svg’ or type=’binary-art’ and
//- there is a “src” attribute, the data needs to be moved into the content of
//- the <artwork> element. Note that this step assumes that all of the preferred
//- types other than “binary-art” are text, which is possibly wrong.
//-   - If the “src” URI scheme is “data:”, fill the content of the <artwork>
//-     element with the correctly-escaped form of that data and remove the 
//-     “src” attribute.
//-   - If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the
//-     content of the <artwork> element with the correctly-escaped form of the
//-     resolved text from the URI in the “src” attribute. If there is no
//-     “originalSrc” attribute, add an “originalSrc” attribute with the value
//-     of the URI and remove the “src” attribute.

include ./elements.jade

mixin artwork(e)
  - var src = $att(e, 'src')
  if src
    //- 1. If an <artwork> element has a “src” attribute where no scheme is
    //- specified, copy the “src” attribute value to the “originalSrc”
    //- attribute, and replace the “src” value with a URI that uses the “file:”
    //- scheme in a path relative to the file being processed. See Section 8 for
    //- warnings about this step. This will likely be one of the most common
    //- authoring approaches.
    - var suri = defs.url.parse(src)
    if !suri.protocol
      if !$att(e, 'originalSrc')
        - e.attr('originalSrc', src)
      - suri = defs.state.inputUri.resolveObject(suri)
      - e.attr('src', suri.format())
      
    //- 2. If an <artwork> element has a “src” attribute with a “file:”
    //- scheme, and if processing the URL would cause the processor to
    //- retrieve a file that is not in the same directory, or a subdirectory,
    //- as the file being processed, give an error. If the “src” has any
    //- shellmeta strings (such as “`”, “$USER”, and so on) that would be
    //- processed , give an error. Replace the “src” attribute with a URI that
    //- uses the “file:” scheme in a path relative to the file being
    //- processed. This rule attempts to prevent <artwork
    //- src=’file:///etc/passwd’> and similar security issues. See Section 8
    //- for warnings about this step.
    if suri.protocol === 'file:'
      //- make sure all of the ..'s and whatnot are taken care of
      //- TODO: test other shellmetas, like backticks, dollar, etc.
      - var p = defs.path.resolve(suri.pathname)
      if !p.startsWith(defs.state.cwd + defs.path.sep)
        +error('invalid file: path: ' + src, e)
      if p !== suri.pathname
        - suri.pathname = p
        - e.attr('src', suri.format())

    //- 3. If an <artwork> element has a “src” attribute, and the element has
    //- content, give an error.
    if e.childNodes().length > 0
      +error('Invalid artwork with both source and contents', e)
      
    //- 4. If an <artwork> element has type=’svg’ and there is a “src”
    //- attribute, the data needs to be moved into the content of the <artwork>
    //- element.
    - var typ = $att(e, 'type')
    if typ === 'svg'
      //-   - If the “src” URI scheme is “data:”, fill the content of the
      //-     <artwork> element with that data and remove the “src” attribute.
      - var buf = null
      if suri.protocol === 'data:'
        - buf = defs.dataUri.decode(src)
      else 
        //- - If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the
        //-   content of the <artwork> element with the resolved XML from the
        //-   URI  in the “src” attribute. If there is no “originalSrc”
        //-   attribute, add  an “originalSrc” attribute with the value of the
        //-   URI and remove the  “src” attribute.
        if suri.protocol === 'file:'
          - buf = defs.fs.readFileSync(suri.pathname)
        else if (suri.protocol === 'http:') || (suri.protocol === 'https:')
          - var res = defs.urllibsync.request(src)
          if res.status !== 200
            +error('HTTP error (' + res.statusCode + '): ' + src, e)
          - buf = res.data
        else
          +error('Unknown <artwork> src protocol: ' + suri.protocol, e)
        if !$att(e, 'originalSrc')
          - e.attr('originalSrc', src)
      - var doc = defs.xml.parseXml(buf)
      - e.addChild(doc.root())
      - e.attr('src').remove()

    else if typ === 'binary-art'
      //- 5. If an <artwork> element has type=’binary-art’, the data needs to be
      //- in a “src” attribute with a URI scheme of “data:”. If the “src” URI
      //- scheme is “file:”, “http:”, or “https:”, resolve the URL. Replace the
      //- “src” attribute with a “data:” URI, and add an “originalSrc” attribute
      //- with the value of the URI. For the “http:” and “https:” URI schemes,
      //- the mediatype of the “data:” URI will be the Content-Type of the HTTP
      //- response. For the “file:” URI scheme, the mediatype of the “data:” URI
      //- needs to be guessed with heuristics (this is possibly a bad idea).
      //- This also fails for content that includes binary images but uses a
      //- type other than “binary-art”. Note: since this feature can’t be used
      //- for RFCs at the moment, this entire feature might be de-prioritized.
      if suri.protocol !== 'data:'
        - var buf = null
        - var media = null
        if suri.protocol === 'file:'
          - buf = defs.fs.readFileSync(suri.pathname)
          - media = defs.mime.lookup(suri.pathname)
        else if (suri.protocol === 'http:') || (suri.protocol === 'https:')
          - var res = defs.urllibsync.request(src)
          if res.status !== 200
            +error('HTTP error (' + res.statusCode + '): ' + src, e)
          - buf = res.data
          - media = res.headers['content-type'];
          - media = media.replace(/\s+/g, '');
        else
          +error('Unknown <artwork> src protocol: ' + suri.protocol, e)
        - e.attr('src', defs.dataUri.encode(buf, media))
        if !$att(e, 'originalSrc')
          - e.attr('originalSrc', src)
    else
      //- 6. If an <artwork> element does not have type=’svg’ or
      //- type=’binary-art’ and there is a “src” attribute, the data needs to be
      //- moved into the content of the <artwork> element. Note that this step
      //- assumes that all of the preferred types other than “binary-art” are
      //- text, which is possibly wrong.
      //- - If the “src” URI scheme is “data:”, fill the content of the
      //-   <artwork> element with the correctly-escaped form of that data and
      //-   remove the  “src” attribute.
      - var buf = null
      if suri.protocol === 'data:'
        - buf = defs.dataUri.decode(src)
      else
        //- - If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the
        //-   content of the <artwork> element with the correctly-escaped form
        //-   of the resolved text from the URI in the “src” attribute. If
        //-   there is no “originalSrc” attribute, add an “originalSrc”
        //-   attribute with the value of the URI and remove the “src”
        //-   attribute.
        if suri.protocol === 'file:'
          - buf = defs.fs.readFileSync(suri.pathname)
        else if (suri.protocol === 'http:') || (suri.protocol === 'https:')
          - var res = defs.urllibsync.request(src)
          if res.status !== 200
            +error('HTTP error (' + res.statusCode + '): ' + src, e)
          - buf = res.data
          // TODO: use the content encoding in the HTTP response.
        else
          +error('Unknown <artwork> src protocol: ' + suri.protocol, e)
        if !$att(e, 'originalSrc')
          - e.attr('originalSrc', src)
      - e.text(buf.toString())
      - e.attr('src').remove()
    
  +elem(e)
  
+root
